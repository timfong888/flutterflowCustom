import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';

class SimpleAudioPlayer extends StatefulWidget {
  final Color playbackButtonColor;
  final Color fillColor;
  final Color textColor;
  final List<CompactionsRecord> compactionDocPlaylist;
  final int currentIndex;

  const SimpleAudioPlayer({
    Key? key,
    required this.playbackButtonColor,
    required this.fillColor,
    required this.textColor,
    required this.compactionDocPlaylist,
    required this.currentIndex,
  }) : super(key: key);

  @override
  _SimpleAudioPlayerState createState() => _SimpleAudioPlayerState();
}

class _SimpleAudioPlayerState extends State<SimpleAudioPlayer> {
  late AudioPlayer _player;
  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    _player = AudioPlayer();
    _initializeAudio();

    // Listener for currentIndexStream
    _player.currentIndexStream.listen((currentIndex) {
      setState(() {
        // This triggers a rebuild with updated track information
      });
    });

    // Listener for playing state
    _player.playingStream.listen((playing) {
      setState(() {
        _isPlaying = playing;
      });
    });
  }

  Future<void> _initializeAudio() async {
    try {
      final playlist = ConcatenatingAudioSource(
        children: widget.compactionDocPlaylist.map((doc) => AudioSource.uri(Uri.parse(doc.audioUrl))).toList(),
      );
      await _player.setAudioSource(playlist, initialIndex: widget.currentIndex);
    } catch (e) {
      print("Error loading audio source: $e");
    }
  }

  @override
  void dispose() {
    _player.dispose();
    super.dispose();
  }

  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    return "${twoDigits(duration.inHours)}:${twoDigits(duration.inMinutes.remainder(60))}:${twoDigits(duration.inSeconds.remainder(60))}";
  }

  @override
  Widget build(BuildContext context) {
    final currentTrack = widget.compactionDocPlaylist.isNotEmpty && _player.currentIndex != null
        ? widget.compactionDocPlaylist[_player.currentIndex!]
        : null;

    return Container(
      padding: EdgeInsets.all(8),
      color: widget.fillColor,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Flexible(
                flex: 3,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      currentTrack?.itemTitle ?? 'Default Title',
                      style: TextStyle(fontWeight: FontWeight.w200, fontSize: 10, fontFamily: 'Arial', color: widget.textColor),
                    ),
                    StreamBuilder<Duration?>(
                      stream: _player.positionStream,
                      builder: (context, snapshot) {
                        final currentPosition = snapshot.data ?? Duration.zero;
                        final totalDuration = _player.duration ?? Duration.zero;
                        return Text('${_formatDuration(currentPosition)} / ${_formatDuration(totalDuration)}',
                          style: TextStyle(fontWeight: FontWeight.w100, fontSize: 8, fontFamily: 'Arial', color: widget.textColor),
                        );
                      },
                    ),
                  ],
                ),
              ),
              Flexible(
                flex: 1,
                child: IconButton(
                  icon: Icon(_isPlaying ? Icons.pause : Icons.play_arrow, color: widget.playbackButtonColor),
                  onPressed: () {
                    if (_player.playing) {
                      _player.pause();
                    } else {
                      _player.play();
                    }
                  },
                ),
              ),
            ],
          ),
          SizedBox(height: 4),
          StreamBuilder<Duration?>(
            stream: _player.positionStream,
            builder: (context, snapshot) {
              var currentPosition = snapshot.data ?? Duration.zero;
              final totalDuration = _player.duration ?? Duration.zero;
              currentPosition = currentPosition > totalDuration ? totalDuration : currentPosition;
              return SliderTheme(
                data: SliderTheme.of(context).copyWith(
                  trackHeight: 2.0,
                  thumbShape: RoundSliderThumbShape(enabledThumbRadius: 0.0),
                  overlayShape: RoundSliderOverlayShape(overlayRadius: 0.0),
                ),
                child: Slider(
                  min: 0.0,
                  max: totalDuration.inMilliseconds.toDouble(),
                  value: currentPosition.inMilliseconds.toDouble(),
                  onChanged: (value) {
                    if (totalDuration.inMilliseconds > 0) {
                      _player.seek(Duration(milliseconds: value.toInt()));
                    }
                  },
                ),
              );
            },
          ),
          // Optionally display the thumbnail
          if (currentTrack != null)
            Image.network(currentTrack.itemThumbnailUrl, width: 100, height: 100),
        ],
      ),
    );
  }
}

class CompactionsRecord {
  // Your CompactionsRecord class definition
  final String audioUrl;
  final String itemTitle;
  final String itemThumbnailUrl;

  CompactionsRecord({required this.audioUrl, required this.itemTitle, required this.itemThumbnailUrl});
}
