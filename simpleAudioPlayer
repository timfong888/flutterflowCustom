// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/widgets/index.dart'; // Imports other custom widgets
import '/custom_code/actions/index.dart'; // Imports custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';

class SimpleAudioPlayer extends StatefulWidget {
  const SimpleAudioPlayer({
    Key? key,
    this.width,
    this.height,
    required this.playbackButtonColor,
    required this.fillColor,
    required this.textColor,
    this.compactionDocPlaylist,
    required this.currentIndex,
  }) : super(key: key);

  final double? width;
  final double? height;
  final Color playbackButtonColor;
  final Color fillColor;
  final Color textColor;
  final List<CompactionsRecord>? compactionDocPlaylist;
  final int currentIndex;

  @override
  _SimpleAudioPlayerState createState() => _SimpleAudioPlayerState();
}

class _SimpleAudioPlayerState extends State<SimpleAudioPlayer> {
  late AudioPlayer _player;
  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    _player = AudioPlayer();
    _initializeAudio();

    // Listening to changes in the playing track's index
    _player.currentIndexStream.listen((currentIndex) {
      setState(() {
        // Handle UI updates or other actions when the track changes
      });
    });

    // Listening to the player state to identify when a track finishes playing
    _player.playerStateStream.listen((playerState) {
      if (playerState.processingState == ProcessingState.completed) {
        // This block is executed when a track finishes playing
        // Implement your custom logic here, e.g., UI updates, loading next track info, etc.
      }
    });
  }

  Future<void> _initializeAudio() async {
    try {
      final playlist = ConcatenatingAudioSource(
        children: widget.compactionDocPlaylist
                ?.map((doc) => AudioSource.uri(Uri.parse(doc.audioUrl)))
                .toList() ?? [],
      );
      if (playlist.children.isNotEmpty) {
        await _player.setAudioSource(playlist, initialIndex: widget.currentIndex);
      }
    } catch (e) {
      print("Error loading audio source: $e");
    }
  }


  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    return "${twoDigits(duration.inHours)}:${twoDigits(duration.inMinutes.remainder(60))}:${twoDigits(duration.inSeconds.remainder(60))}";
  }

  @override
  void dispose() {
    _player.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(covariant SimpleAudioPlayer oldWidget) {
    super.didUpdateWidget(oldWidget);

    // Check if currentIndex has changed
    if (widget.currentIndex != oldWidget.currentIndex) {
      // Update the audio player to play the track at the new currentIndex
      _changeTrack(widget.currentIndex);
    }
  }

  void _changeTrack(int newIndex) {
    if (newIndex >= 0 && widget.compactionDocPlaylist != null &&
        newIndex < widget.compactionDocPlaylist!.length) {
      final newTrack = widget.compactionDocPlaylist![newIndex];
      _player.setUrl(newTrack.audioUrl).then((_) {
        _player.play();
      });
    }
  }


  @override
  Widget build(BuildContext context) {
    CompactionsRecord? currentTrack;
    if (widget.compactionDocPlaylist != null &&
        widget.currentIndex >= 0 &&
        widget.currentIndex < widget.compactionDocPlaylist!.length) {
      currentTrack = widget.compactionDocPlaylist![widget.currentIndex];
    }

    return Container(
      padding: EdgeInsets.all(8),
      color: widget.fillColor,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Thumbnail Image
              if (currentTrack != null)
                Image.network(
                  currentTrack.itemThumbnailUrl,
                  height: widget.height != null
                      ? widget.height! * 0.85
                      : 85, // 85% of widget.height
                ),

              // Text Column for Title and Duration
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Text widget for the title
                    if (currentTrack != null)
                      Text(
                        currentTrack.itemTitle,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,  // Adjust font size as needed
                          color: widget.textColor,
                        ),
                      ),
                  ],
                ),
              ),
              // Play/Pause Button
              IconButton(
                icon: Icon(
                  _isPlaying ? Icons.pause : Icons.play_arrow,
                  color: widget.playbackButtonColor,
                ),
                onPressed: () {
                  if (_player.playing) {
                    _player.pause();
                  } else {
                    _player.play();
                  }
                  setState(() {
                    _isPlaying = !_isPlaying;
                  });
                },
              ),
            ],
          ),
          SizedBox(height: 4),
          // Duration and Progress Slider
          StreamBuilder<Duration?>(
            stream: _player.positionStream,
            builder: (context, snapshot) {
              var currentPosition = snapshot.data ?? Duration.zero;
              final totalDuration = _player.duration ?? Duration.zero;
              currentPosition = currentPosition > totalDuration
                  ? totalDuration
                  : currentPosition;
              return SliderTheme(
                data: SliderTheme.of(context).copyWith(
                  trackHeight: 2.0,
                  thumbShape: RoundSliderThumbShape(enabledThumbRadius: 0.0),
                  overlayShape: RoundSliderOverlayShape(overlayRadius: 0.0),
                ),
                child: Slider(
                  min: 0.0,
                  max: totalDuration.inMilliseconds.toDouble(),
                  value: currentPosition.inMilliseconds.toDouble(),
                  onChanged: (value) {
                    if (totalDuration.inMilliseconds > 0) {
                      _player.seek(Duration(milliseconds: value.toInt()));
                    }
                  },
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}
